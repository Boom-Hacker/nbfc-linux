# This script was generated by argparse-shell-complete.
# argparse-shell-complete: A tool that creates robust and reliable autocompletion scripts using Python's argparse module.
# For more information, visit: https://github.com/argparse-shell-complete/argparse-shell-complete

_nbfc_compgen_w_replacement() {
  local APPEND=0

  [[ "$1" == "-a" ]] && { shift; APPEND=1; }
  [[ "$1" == "--" ]] && { shift; }

  local cur="$1"
  shift

  (( APPEND )) || COMPREPLY=()

  for word; do
  if [[ "$word" == "$cur"* ]]; then
    COMPREPLY+=("$(printf '%q' "$word")")
  fi
  done
}

_nbfc_exec() {
  local IFS=$'\n'
  local -a OUTPUT_LINES=($(eval "$1"))
  unset IFS
  local LINE
  for LINE in "${OUTPUT_LINES[@]}"; do
    LINE="${LINE%%$'\t'*}"
    if [[ "$LINE" == "$cur"* ]]; then
      COMPREPLY+=("$(printf '%q' "$LINE")")
    fi
  done
}

_nbfc() {
  local cur prev words cword split
  _init_completion -n = || return

  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( 0 < POSITIONAL_NUM )); then
    case "${POSITIONALS[0]}" in
      start) _nbfc_start && return 0 || return 1;;
      stop) _nbfc_stop && return 0 || return 1;;
      restart) _nbfc_restart && return 0 || return 1;;
      status) _nbfc_status && return 0 || return 1;;
      config) _nbfc_config && return 0 || return 1;;
      set) _nbfc_set && return 0 || return 1;;
      wait-for-hwmon) _nbfc_wait_for_hwmon && return 0 || return 1;;
      help) _nbfc_help && return 0 || return 1;;
    esac
  fi

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_version )) || POSSIBLE_OPTIONS+=(--version)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  # complete positionals
  case $POSITIONAL_NUM in
    1)
      _nbfc_compgen_w_replacement -a -- "$cur" start stop restart status config set wait-for-hwmon help;;
  esac

  return 1
}

_nbfc_start() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0 HAVE_help=0 HAVE_read_only=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --help)
        HAVE_help=1;;
      --read-only)
        HAVE_read_only=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            h)
              HAVE_help=1;;
            r)
              HAVE_read_only=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_read_only )) || POSSIBLE_OPTIONS+=(-r --read-only)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_nbfc_stop() {
  return 1
}

_nbfc_restart() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0 HAVE_help=0 HAVE_read_only=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --help)
        HAVE_help=1;;
      --read-only)
        HAVE_read_only=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            h)
              HAVE_help=1;;
            r)
              HAVE_read_only=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_read_only )) || POSSIBLE_OPTIONS+=(-r --read-only)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_nbfc_status() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0 HAVE_help=0 HAVE_all=0 HAVE_service=0 HAVE_fan=0 HAVE_watch=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --help)
        HAVE_help=1;;
      --all)
        HAVE_all=1;;
      --service)
        HAVE_service=1;;
      --fan)
        (( ++argi ));&
      --fan=*)
        HAVE_fan=1;;
      --watch)
        (( ++argi ));&
      --watch=*)
        HAVE_watch=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            h)
              HAVE_help=1;;
            a)
              HAVE_all=1;;
            s)
              HAVE_service=1;;
            f)
              HAVE_fan=1
              $has_trailing_chars || (( ++argi ))
              break;;
            w)
              HAVE_watch=1
              $has_trailing_chars || (( ++argi ))
              break;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -f|--fan)
        return 0;;
      -w|--watch)
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)f)
        __complete_options -f "$cur" && return 0;;
      -!(-*)w)
        __complete_options -w "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --fan)
        __complete_options --fan "$cur" && return 0;;
      --watch)
        __complete_options --watch "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_all || HAVE_service || HAVE_fan )) || POSSIBLE_OPTIONS+=(-a --all)
    (( HAVE_service || HAVE_all || HAVE_fan )) || POSSIBLE_OPTIONS+=(-s --service)
    (( HAVE_fan || HAVE_all || HAVE_service )) || POSSIBLE_OPTIONS+=(-f --fan)
    (( HAVE_watch )) || POSSIBLE_OPTIONS+=(-w --watch)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_nbfc_config() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0 HAVE_help=0 HAVE_list=0 HAVE_set=0 HAVE_apply=0 HAVE_recommend=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --help)
        HAVE_help=1;;
      --list)
        HAVE_list=1;;
      --set)
        (( ++argi ));&
      --set=*)
        HAVE_set=1;;
      --apply)
        (( ++argi ));&
      --apply=*)
        HAVE_apply=1;;
      --recommend)
        HAVE_recommend=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            h)
              HAVE_help=1;;
            l)
              HAVE_list=1;;
            s)
              HAVE_set=1
              $has_trailing_chars || (( ++argi ))
              break;;
            a)
              HAVE_apply=1
              $has_trailing_chars || (( ++argi ))
              break;;
            r)
              HAVE_recommend=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -s|--set)
        cd @DATADIR@/nbfc/configs
        filedir
        cd -
        return 0;;
      -a|--apply)
        cd @DATADIR@/nbfc/configs
        filedir
        cd -
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)s)
        __complete_options -s "$cur" && return 0;;
      -!(-*)a)
        __complete_options -a "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --set)
        __complete_options --set "$cur" && return 0;;
      --apply)
        __complete_options --apply "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_list || HAVE_set || HAVE_apply || HAVE_recommend )) || POSSIBLE_OPTIONS+=(-l --list)
    (( HAVE_set || HAVE_list || HAVE_apply || HAVE_recommend )) || POSSIBLE_OPTIONS+=(-s --set)
    (( HAVE_apply || HAVE_list || HAVE_set || HAVE_recommend )) || POSSIBLE_OPTIONS+=(-a --apply)
    (( HAVE_recommend || HAVE_list || HAVE_set || HAVE_apply )) || POSSIBLE_OPTIONS+=(-r --recommend)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_nbfc_set() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_version=0 HAVE_help=0 HAVE_auto=0 HAVE_speed=0 HAVE_fan=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --version)
        HAVE_version=1;;
      --help)
        HAVE_help=1;;
      --auto)
        HAVE_auto=1;;
      --speed)
        (( ++argi ));&
      --speed=*)
        HAVE_speed=1;;
      --fan)
        (( ++argi ));&
      --fan=*)
        HAVE_fan=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            h)
              HAVE_help=1;;
            a)
              HAVE_auto=1;;
            s)
              HAVE_speed=1
              $has_trailing_chars || (( ++argi ))
              break;;
            f)
              HAVE_fan=1
              $has_trailing_chars || (( ++argi ))
              break;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -s|--speed)
        return 0;;
      -f|--fan)
        _nbfc_exec 'nbfc complete-fans'
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)s)
        __complete_options -s "$cur" && return 0;;
      -!(-*)f)
        __complete_options -f "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --speed)
        __complete_options --speed "$cur" && return 0;;
      --fan)
        __complete_options --fan "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_auto || HAVE_speed )) || POSSIBLE_OPTIONS+=(-a --auto)
    (( HAVE_speed || HAVE_auto )) || POSSIBLE_OPTIONS+=(-s --speed)
    (( HAVE_fan )) || POSSIBLE_OPTIONS+=(-f --fan)
    _nbfc_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_nbfc_wait_for_hwmon() {
  return 1
}

_nbfc_help() {
  return 1
}

complete -F _nbfc nbfc

# vim: ft=sh ts=2 sts=2 sw=2 et

# This script was generated by argparse-shell-complete.
# argparse-shell-complete: A tool that creates robust and reliable autocompletion scripts using Python's argparse module.
# For more information, visit: https://github.com/argparse-shell-complete/argparse-shell-complete

_nbfc_service_compgen_w_replacement() {
  local APPEND=0

  [[ "$1" == "-a" ]] && { shift; APPEND=1; }
  [[ "$1" == "--" ]] && { shift; }

  local cur="$1"
  shift

  (( APPEND )) || COMPREPLY=()

  for word; do
  if [[ "$word" == "$cur"* ]]; then
    COMPREPLY+=("$(printf '%q' "$word")")
  fi
  done
}

_nbfc_service() {
  local cur prev words cword split
  _init_completion -n = || return

  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_read_only=0 HAVE_fork=0 HAVE_debug=0 HAVE_config_file=0 HAVE_embedded_controller=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --read-only)
        HAVE_read_only=1;;
      --fork)
        HAVE_fork=1;;
      --debug)
        HAVE_debug=1;;
      --config-file)
        (( ++argi ));&
      --config-file=*)
        HAVE_config_file=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            r)
              HAVE_read_only=1;;
            f)
              HAVE_fork=1;;
            d)
              HAVE_debug=1;;
            c)
              HAVE_config_file=1
              $has_trailing_chars || (( ++argi ))
              break;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -c|--config-file)
        _filedir
        return 0;;
      -e|--embedded-controller)
        _nbfc_service_compgen_w_replacement -- "$cur" dummy dev_port ec_sys acpi_ec
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)c)
        __complete_options -c "$cur" && return 0;;
      -!(-*)e)
        __complete_options -e "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --config-file)
        __complete_options --config-file "$cur" && return 0;;
      --embedded-controller)
        __complete_options --embedded-controller "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_read_only )) || POSSIBLE_OPTIONS+=(-r --read-only)
    (( HAVE_fork )) || POSSIBLE_OPTIONS+=(-f --fork)
    (( HAVE_debug )) || POSSIBLE_OPTIONS+=(-d --debug)
    (( HAVE_config_file )) || POSSIBLE_OPTIONS+=(-c --config-file)
    (( HAVE_embedded_controller )) || POSSIBLE_OPTIONS+=(-e --embedded-controller)
    _nbfc_service_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

complete -F _nbfc_service nbfc_service

# vim: ft=sh ts=2 sts=2 sw=2 et

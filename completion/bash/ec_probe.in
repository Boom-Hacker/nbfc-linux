# This script was generated by argparse-shell-complete.
# argparse-shell-complete: A tool that creates robust and reliable autocompletion scripts using Python's argparse module.
# For more information, visit: https://github.com/argparse-shell-complete/argparse-shell-complete

_ec_probe_compgen_w_replacement() {
  local APPEND=0

  [[ "$1" == "-a" ]] && { shift; APPEND=1; }
  [[ "$1" == "--" ]] && { shift; }

  local cur="$1"
  shift

  (( APPEND )) || COMPREPLY=()

  for word; do
  if [[ "$word" == "$cur"* ]]; then
    COMPREPLY+=("$(printf '%q' "$word")")
  fi
  done
}

_ec_probe() {
  local cur prev words cword split
  _init_completion -n = || return

  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( 0 < POSITIONAL_NUM )); then
    case "${POSITIONALS[0]}" in
      dump) _ec_probe_dump && return 0 || return 1;;
      load) _ec_probe_load && return 0 || return 1;;
      read) _ec_probe_read && return 0 || return 1;;
      write) _ec_probe_write && return 0 || return 1;;
      monitor) _ec_probe_monitor && return 0 || return 1;;
      watch) _ec_probe_watch && return 0 || return 1;;
    esac
  fi

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -e|--embedded-controller)
        _ec_probe_compgen_w_replacement -- "$cur" acpi_ec ec_sys dev_port
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)e)
        __complete_options -e "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --embedded-controller)
        __complete_options --embedded-controller "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_embedded_controller )) || POSSIBLE_OPTIONS+=(-e --embedded-controller)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  # complete positionals
  case $POSITIONAL_NUM in
    1)
      _ec_probe_compgen_w_replacement -a -- "$cur" dump load read write monitor watch;;
  esac

  return 1
}

_ec_probe_dump() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0 HAVE_color=0 HAVE_no_color=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --color)
        HAVE_color=1;;
      --no-color)
        HAVE_no_color=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
            c)
              HAVE_color=1;;
            C)
              HAVE_no_color=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_color )) || POSSIBLE_OPTIONS+=(-c --color)
    (( HAVE_no_color )) || POSSIBLE_OPTIONS+=(-C --no-color)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_ec_probe_load() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  # complete positionals
  case $POSITIONAL_NUM in
    2)
      local -a COMPREPLY_BACK=("${COMPREPLY[@]}")
      _filedir
      COMPREPLY=("${COMPREPLY_BACK[@]}" "${COMPREPLY[@]}");;
  esac

  return 1
}

_ec_probe_read() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0 HAVE_word=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --word)
        HAVE_word=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
            w)
              HAVE_word=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_word )) || POSSIBLE_OPTIONS+=(-w --word)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  # complete positionals
  case $POSITIONAL_NUM in
    2)
      COMPREPLY+=($(compgen -W '{0..255}' -- "$cur"));;
  esac

  return 1
}

_ec_probe_write() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0 HAVE_word=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --word)
        HAVE_word=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
            w)
              HAVE_word=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_word )) || POSSIBLE_OPTIONS+=(-w --word)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  # complete positionals
  case $POSITIONAL_NUM in
    2)
      COMPREPLY+=($(compgen -W '{0..255}' -- "$cur"));;
    3)
  ;;
  esac

  return 1
}

_ec_probe_monitor() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0 HAVE_interval=0 HAVE_timespan=0 HAVE_report=0 HAVE_clearly=0 HAVE_decimal=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --interval)
        (( ++argi ));&
      --interval=*)
        HAVE_interval=1;;
      --timespan)
        (( ++argi ));&
      --timespan=*)
        HAVE_timespan=1;;
      --report)
        (( ++argi ));&
      --report=*)
        HAVE_report=1;;
      --clearly)
        HAVE_clearly=1;;
      --decimal)
        HAVE_decimal=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
            i)
              HAVE_interval=1
              $has_trailing_chars || (( ++argi ))
              break;;
            t)
              HAVE_timespan=1
              $has_trailing_chars || (( ++argi ))
              break;;
            r)
              HAVE_report=1
              $has_trailing_chars || (( ++argi ))
              break;;
            c)
              HAVE_clearly=1;;
            d)
              HAVE_decimal=1;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -i|--interval)
        return 0;;
      -t|--timespan)
        return 0;;
      -r|--report)
        _filedir
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)i)
        __complete_options -i "$cur" && return 0;;
      -!(-*)t)
        __complete_options -t "$cur" && return 0;;
      -!(-*)r)
        __complete_options -r "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --interval)
        __complete_options --interval "$cur" && return 0;;
      --timespan)
        __complete_options --timespan "$cur" && return 0;;
      --report)
        __complete_options --report "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_interval )) || POSSIBLE_OPTIONS+=(-i --interval)
    (( HAVE_timespan )) || POSSIBLE_OPTIONS+=(-t --timespan)
    (( HAVE_report )) || POSSIBLE_OPTIONS+=(-r --report)
    (( HAVE_clearly )) || POSSIBLE_OPTIONS+=(-c --clearly)
    (( HAVE_decimal )) || POSSIBLE_OPTIONS+=(-d --decimal)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

_ec_probe_watch() {
  local -a POSITIONALS
  local END_OF_OPTIONS=0 POSITIONAL_NUM=0 HAVE_help=0 HAVE_embedded_controller=0 HAVE_help=0 HAVE_interval=0 HAVE_timespan=0

  local argi
  for ((argi=1; argi < ${#words[@]} - 1; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      --help)
        HAVE_help=1;;
      --embedded-controller)
        (( ++argi ));&
      --embedded-controller=*)
        HAVE_embedded_controller=1;;
      --help)
        HAVE_help=1;;
      --interval)
        (( ++argi ));&
      --interval=*)
        HAVE_interval=1;;
      --timespan)
        (( ++argi ));&
      --timespan=*)
        HAVE_timespan=1;;
      --)
        END_OF_OPTIONS=1
        for ((++argi; argi < ${#words[@]}; ++argi)); do
          POSITIONALS[$((POSITIONAL_NUM++))]="${words[$argi]}"
        done
        break;;
      --*)
        ;;
      -)
        POSITIONALS[$((POSITIONAL_NUM++))]="-";;
      -*)
        local c
        for ((c=1; c < ${#arg}; ++c)); do
          local char="${arg:$c:1}"
          local has_trailing_chars=$( (( $c + 1 < ${#arg} )) && echo true || echo false)
          case "$char" in
            h)
              HAVE_help=1;;
            e)
              HAVE_embedded_controller=1
              $has_trailing_chars || (( ++argi ))
              break;;
            h)
              HAVE_help=1;;
            i)
              HAVE_interval=1
              $has_trailing_chars || (( ++argi ))
              break;;
            t)
              HAVE_timespan=1
              $has_trailing_chars || (( ++argi ))
              break;;
          esac
        done;;
      *)
        POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  for ((; argi < ${#words[@]}; ++argi)); do
    local arg="${words[$argi]}"

    case "$arg" in
      -) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
      -*);;
      *) POSITIONALS[$((POSITIONAL_NUM++))]="$arg";;
    esac
  done

  __complete_options() {
    local option="$1" cur="$2"

    case "$option" in
      -i|--interval)
        return 0;;
      -t|--timespan)
        return 0;;
    esac

    return 1
  }

  __complete_short_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      -!(-*)i)
        __complete_options -i "$cur" && return 0;;
      -!(-*)t)
        __complete_options -t "$cur" && return 0;;
    esac

    return 1
  }

  __complete_long_with_required_arg() {
    local option="$1" cur="$2"

    case "$option" in
      --interval)
        __complete_options --interval "$cur" && return 0;;
      --timespan)
        __complete_options --timespan "$cur" && return 0;;
    esac

    return 1
  }

  __is_oldstyle_option() { return 1; }

  case "$prev" in
    --*)
      __complete_long_with_required_arg "$prev" "$cur" && return 0;;
    -*)
      __complete_short_with_required_arg "$prev" "$cur" && return 0;;
  esac

  case "$cur" in
    --*=*)
      __complete_long_with_required_arg "${cur%%=*}" "${cur##*=}" && return 0;;
    -*=*);;
    -*)
      __prefix_compreply() {
        local I PREFIX="$1"
        for ((I=0; I < ${#COMPREPLY[@]}; ++I)); do
          COMPREPLY[$I]="$PREFIX${COMPREPLY[$I]}"
        done
      }
      if ! __is_oldstyle_option "$cur"; then
        # TODO: check if -* is an oldstyle option without an argument
        local i
        for ((i=2; i <= ${#cur}; ++i)); do
          local option="${cur:0:$i}" value="${cur:$i}"
          __complete_short_with_required_arg "$option" "$value" && __prefix_compreply "$option" && return 0
        done
      fi
      ;;
  esac

  if (( ! END_OF_OPTIONS )) && [[ "$cur" = -* ]]; then
    local -a POSSIBLE_OPTIONS=()
    (( HAVE_help )) || POSSIBLE_OPTIONS+=(--help -h)
    (( HAVE_interval )) || POSSIBLE_OPTIONS+=(-i --interval)
    (( HAVE_timespan )) || POSSIBLE_OPTIONS+=(-t --timespan)
    _ec_probe_compgen_w_replacement -a -- "$cur" "${POSSIBLE_OPTIONS[@]}"
  fi

  return 1
}

complete -F _ec_probe ec_probe

# vim: ft=sh ts=2 sts=2 sw=2 et

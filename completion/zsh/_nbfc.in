#compdef nbfc

# This script was generated by argparse-shell-complete.
# argparse-shell-complete: A tool that creates robust and reliable autocompletion scripts using Python's argparse module.
# For more information, visit: https://github.com/argparse-shell-complete/argparse-shell-complete

_nbfc_get_positional() {
  local FUNC='get_positional'
  local CONTAINS="${FUNC}_contains"

  $CONTAINS() {
  local ARG KEY="$1"; shift
  for ARG; do [[ "$KEY" == "$ARG" ]] && return 0; done
  return 1
  }

  local IFS=','
  local -a OPTIONS=(${=1})
  local WANTED_POSITIONAL=$2
  unset IFS
  shift 2

  local -a   OLD_OPTS_WITH_ARG   OLD_OPTS_WITH_OPTIONAL_ARG   OLD_OPTS_WITHOUT_ARG
  local -a  LONG_OPTS_WITH_ARG  LONG_OPTS_WITH_OPTIONAL_ARG  LONG_OPTS_WITHOUT_ARG
  local -a SHORT_OPTS_WITH_ARG SHORT_OPTS_WITH_OPTIONAL_ARG SHORT_OPTS_WITHOUT_ARG

  local OPTION
  for OPTION in "${OPTIONS[@]}"; do
  case "$OPTION" in
    (--?*=)    LONG_OPTS_WITH_ARG+=("${OPTION//=/}");;
    (--?*=\?)  LONG_OPTS_WITH_OPTIONAL_ARG+=("${OPTION//=?/}");;
    (--?*);    LONG_OPTS_WITHOUT_ARG+=("$OPTION");;

    (-?=)      SHORT_OPTS_WITH_ARG+=("${OPTION//=/}");;
    (-?=\?)    SHORT_OPTS_WITH_OPTIONAL_ARG+=("${OPTION//=?/}");;
    (-?)       SHORT_OPTS_WITHOUT_ARG+=("$OPTION");;

    (-??*=)    OLD_OPTS_WITH_ARG+=("${OPTION//=/}");;
    (-??*=\?)  OLD_OPTS_WITH_OPTIONAL_ARG+=("${OPTION//=?/}");;
    (-??*)     OLD_OPTS_WITHOUT_ARG+=("$OPTION");;

    (*) echo "$FUNC: $OPTION: not a valid short, long or oldstyle option" >&2; return 1;;
  esac
  done

  local -a POSITIONALS
  local -a HAVING_OPTIONS

  local ARGI=2 # ARG[1] is program name
  while [[ $ARGI -le $# ]]; do
  local ARG="${@[$ARGI]}"
  local HAVE_TRAILING_ARG=$(test $ARGI -lt $# && echo true || echo false)

  case "$ARG" in
    (-)
      POSITIONALS+=(-);;
    (--)
      for ARGI in $(seq $((ARGI + 1)) $#); do
        POSITIONALS+=("${@[$ARGI]}")
      done
      break;;
    (--*)
      for OPTION in $LONG_OPTS_WITH_ARG $LONG_OPTS_WITHOUT_ARG $LONG_OPTS_WITH_OPTIONAL_ARG; do
        if [[ "$ARG" == "$OPTION="* ]]; then
          HAVING_OPTIONS+=("$OPTION")
          break
        elif [[ "$ARG" == "$OPTION" ]]; then
          if $CONTAINS "$OPTION" "${LONG_OPTS_WITH_ARG[@]}"; then
            if $HAVE_TRAILING_ARG; then
              HAVING_OPTIONS+=("$OPTION")
              (( ARGI++ ))
            fi
          else
            HAVING_OPTIONS+=("$OPTION")
          fi
          break
        fi
      done;;
    (-*)
      local HAVE_MATCH=false

      for OPTION in $OLD_OPTS_WITH_ARG $OLD_OPTS_WITHOUT_ARG $OLD_OPTS_WITH_OPTIONAL_ARG; do
        if [[ "$ARG" == "$OPTION="* ]]; then
          HAVING_OPTIONS+=("$OPTION")
          HAVE_MATCH=true
          break
        elif [[ "$ARG" == "$OPTION" ]]; then
          if $CONTAINS "$OPTION" "${OLD_OPTS_WITH_ARG[@]}"; then
            if $HAVE_TRAILING_ARG; then
              HAVING_OPTIONS+=("$OPTION")
              (( ARGI++ ))
            fi
          else
            HAVING_OPTIONS+=("$OPTION")
          fi

          HAVE_MATCH=true
          break
        fi
      done

      if ! $HAVE_MATCH; then
        local ARG_LENGTH=${#ARG}
        local I=1
        local IS_END=false
        while ! $IS_END && test $I -lt $ARG_LENGTH; do
          local ARG_CHAR="${ARG:$I:1}"
          local HAVE_TRAILING_CHARS=$(test $((I+1)) -lt $ARG_LENGTH && echo true || echo false)

          for OPTION in $SHORT_OPTS_WITH_ARG $SHORT_OPTS_WITHOUT_ARG $SHORT_OPTS_WITH_OPTIONAL_ARG; do
            local OPTION_CHAR="${OPTION:1:1}"

            if test "$ARG_CHAR" = "$OPTION_CHAR"; then
              if $CONTAINS "$OPTION" "${SHORT_OPTS_WITH_ARG[@]}"; then
                if $HAVE_TRAILING_CHARS; then
                  HAVING_OPTIONS+=("$OPTION")
                  IS_END=true
                elif $HAVE_TRAILING_ARG; then
                  HAVING_OPTIONS+=("$OPTION")
                  (( ARGI++ ))
                  IS_END=true
                fi
              elif $CONTAINS "$OPTION" "${SHORT_OPTS_WITH_OPTIONAL_ARG[@]}"; then
                HAVING_OPTIONS+=("$OPTION")

                if $HAVE_TRAILING_CHARS; then
                  IS_END=true
                fi
              else
                HAVING_OPTIONS+=("$OPTION")
              fi

              break
            fi
          done

          (( I++ ))
        done
      fi;;
    (*)
      POSITIONALS+=("$ARG");;
  esac

  (( ARGI++ ))
  done

  if test $WANTED_POSITIONAL -eq 0; then
  echo "$FUNC: argv[2]: positionals start at 1, not 0!" >&2
  return 1
  fi

  printf "%s" "${POSITIONALS[$WANTED_POSITIONAL]}"
}

_nbfc_command() {
  local -a DESCRIBE=(
    start:'Start the service'
    stop:'Stop the service'
    restart:'Restart the service'
    status:'Show the service status'
    config:'List or apply configs'
    set:'Control fan speed'
    wait-for-hwmon:'Wait for /sys/class/hwmon/hwmon* files'
    help:'Show help'
  )

  _describe -- command DESCRIBE
}

_nbfc_exec() {
  local IFS=$'\n'
  local -a OUTPUT_LINES=($(eval "$1"))
  unset IFS

  local -a DESCRIBE
  local LINE

  for LINE in "${OUTPUT_LINES[@]}"; do
  LINE="${LINE/:/\\:/}"
  LINE="${LINE/$'\t'/:}"
  DESCRIBE+=("$LINE")
  done

  _describe '' DESCRIBE
}

_nbfc() {
  # We have to check for subcommands here, because _arguments modifies $words
  local opts="--help,-h,--version"
  case "$(_nbfc_get_positional "$opts" 1 "${words[@]}")" in
    (start) _nbfc_start; return $?;;
    (stop) _nbfc_stop; return $?;;
    (restart) _nbfc_restart; return $?;;
    (status) _nbfc_status; return $?;;
    (config) _nbfc_config; return $?;;
    (set) _nbfc_set; return $?;;
    (wait-for-hwmon) _nbfc_wait_for_hwmon; return $?;;
    (help) _nbfc_help; return $?;;
  esac

  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    --version"[show program's version number and exit]"::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_start() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    '(--read-only -r)'{--read-only,-r}'[Start in read-only mode]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_stop() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_restart() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    '(--read-only -r)'{--read-only,-r}'[Restart in read-only mode]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_status() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    '(--fan --service -f -s --all -a)'{--all,-a}'[Show service and fan status (default)]'::' '
    '(--all --fan -a -f --service -s)'{--service,-s}'[Show service status]'::' '
    '(--all --service -a -s --fan -f)'{--fan=,-f+}'[Show status of fan (zero based)]':'FAN INDEX':' '
    '(--watch -w)'{--watch=,-w+}'[Show status periodically]':SECONDS:' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_config() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    '(--apply --recommend --set -a -r -s --list -l)'{--list,-l}'[List all available configs (default)]'::' '
    '(--apply --list --recommend -a -l -r --set -s)'{--set=,-s+}'[Set a config]':config:"_files -W @DATADIR@/nbfc/configs"
    '(--list --recommend --set -l -r -s --apply -a)'{--apply=,-a+}'[Set a config and enable fan control]':config:"_files -W @DATADIR@/nbfc/configs"
    '(--apply --list --set -a -l -s --recommend -r)'{--recommend,-r}'[List configs which may work for your device]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_set() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    '(--speed -s --auto -a)'{--auto,-a}"[Set fan speed to 'auto']"::' '
    '(--auto -a --speed -s)'{--speed=,-s+}'[Set fan speed to PERCENT]':PERCENT:' '
    '(--fan -f)'{--fan=,-f+}'[Fan index (zero based)]':'FAN INDEX':"{_nbfc_exec 'nbfc complete-fans'}"
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_wait_for_hwmon() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc_help() {
  local -a arguments=(
    '(--help -h)'{--help,-h}'[show this help message and exit]'::' '
    1:command1:_nbfc_command
  )

  _arguments -S "${arguments[@]}"
}

_nbfc "$@"

# vim: ft=zsh ts=2 sts=2 sw=2 et

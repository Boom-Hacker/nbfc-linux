# This script was generated by argparse-shell-complete.
# argparse-shell-complete: A tool that creates robust and reliable autocompletion scripts using Python's argparse module.
# For more information, visit: https://github.com/argparse-shell-complete/argparse-shell-complete

function _nbfc_service_fish_helper
  # ===========================================================================
  #
  # This function implements the parsing of options and positionals in the Fish shell.
  #
  # Usage: __fish_helper <OPTIONS> <COMMAND> [ARGS...]
  #
  # The first argument is a comma-seperated list of options that the parser should know about.
  # Short options (-o), long options (--option), and old-style options (-option) are supported.
  #
  # If an option takes an argument, it is suffixed by '='.
  # If an option takes an optional argument, it is suffixed by '=?'.
  #
  # For example:
  #   __fish_helper '-f,--flag,-old-style,--with-arg=,--with-optional=?'
  #
  #   Here, -f, --flag and -old-style don't take options, --with-arg requires an
  #   argument and --with-optional takes an optional argument.
  #
  # COMMANDS
  #   positional_contains <NUM> <WORDS...>
  #     Checks if the positional argument number NUM is one of WORDS.
  #     NUM counts from one.
  #
  #   has_option <OPTIONS...>
  #     Checks if a option given in OPTIONS is passed on commandline.
  #
  #   num_of_positionals [<OPERATOR> <NUMBER>]
  #     Checks the number of positional arguments.
  #     If no arguments are provided, print the total count of positional arguments.
  #     If two arguments are provided, the first argument should be one of
  #     the comparison operators: '-lt', '-le', '-eq', '-ne', '-gt', '-ge'.
  #     Returns 0 if the count of positional arguments matches the
  #     specified NUMBER according to the comparison operator, otherwise returns 1.
  #
  # ===========================================================================

  set -l func '__fish_helper'

  set -l short_opts_with_arg
  set -l long_opts_with_arg
  set -l old_opts_with_arg

  set -l short_opts_without_arg
  set -l long_opts_without_arg
  set -l old_opts_without_arg

  set -l short_opts_with_optional_arg
  set -l long_opts_with_optional_arg
  set -l old_opts_with_optional_arg

  set -l option

  # ===========================================================================
  # Parsing of OPTIONS argument
  # ===========================================================================

  if test (count $argv) -lt 1
    echo "$func: missing OPTIONS argument" >&2
    return 1
  end

  if test -n "$argv[1]"
    for option in (string split -- ',' $argv[1])
      # Using one big switch case is the fastest way
      switch $option
        case '--?*=';   set -a long_opts_with_arg           (string replace -- '='  '' $option)
        case '--?*=\?'; set -a long_opts_with_optional_arg  (string replace -- '=?' '' $option)
        case '--?*';    set -a long_opts_without_arg        $option

        case '-?=';     set -a short_opts_with_arg          (string replace -- '='  '' $option)
        case '-?=\?';   set -a short_opts_with_optional_arg (string replace -- '=?' '' $option)
        case '-?';      set -a short_opts_with_arg          $option

        case '-??*=';   set -a old_opts_with_arg            (string replace -- '='  '' $option)
        case '-??*=\?'; set -a old_opts_with_optional_arg   (string replace -- '=?' '' $option)
        case '-??*';    set -a old_opts_without_arg         $option

        case '*'
          echo "$func: argv[1]: '$option' is not a short, long or old-style option" >&2
          return 1
      end
    end
  end

  set -e argv[1]

  # ===========================================================================
  # Parsing of options and positionals
  # ===========================================================================

  set -l positionals
  set -l having_options

  set -l cmdline (commandline -poc)
  set -l cmdline_count (count $cmdline)

  set -l argi 2 # cmdline[1] is command name
  while test $argi -le $cmdline_count
    set -l arg "$cmdline[$argi]"
    set -l have_trailing_arg (test $argi -lt $cmdline_count && echo true || echo false)

    switch $arg
      case '-'
        set -a positionals -
      case '--'
        for argi in (seq (math $argi + 1) $cmdline_count)
          set -a positionals $cmdline[$argi]
        end
        break
      case '--*'
        for option in $long_opts_with_arg $long_opts_without_arg $long_opts_with_optional_arg
          if string match -q -- "$option=*" $arg
            set -a having_options $option
            break
          else if string match -q -- $option $arg
            if contains -- $option $long_opts_with_arg
              if $have_trailing_arg
                set -a having_options $option
                set argi (math $argi + 1)
              end
            else
              set -a having_options $option
            end
            break
          end
        end
      case '-*'
        set -l have_match false

        for option in $old_opts_with_arg $old_opts_without_arg $old_opts_with_optional_arg
          if string match -q -- "$option=*" $arg
            set -a having_options $option
            set have_match true
            break
          else if string match -q -- $option $arg
            if contains -- $option $old_opts_with_arg
              if $have_trailing_arg
                set -a having_options $option
                set argi (math $argi + 1)
              end
            else
              set -a having_options $option
            end

            set have_match true
            break
          end
        end

        if not $have_match
          set -l arg_length (string length -- $arg)
          set -l i 2
          set is_end false
          while not $is_end && test $i -le $arg_length
            set -l char (string sub -s $i -l 1 -- "$arg")
            set -l have_trailing_chars (test $i -lt $arg_length && echo true || echo false)

            for option in $short_opts_with_arg $short_opts_without_arg $short_opts_with_optional_arg
              set -l option_char (string sub -s 2 -l 1 -- $option)

              if test "$char" = "$option_char"
                if contains -- $option $short_opts_with_arg
                  if $have_trailing_chars
                    set -a having_options $option
                    set is_end true
                  else if $have_trailing_arg
                    set -a having_options $option
                    set argi (math $argi + 1)
                    set is_end true
                  end
                else if contains -- $option $short_opts_with_optional_arg
                  set -a having_options $option

                  if $have_trailing_chars
                    set is_end true
                  end
                else
                  set -a having_options $option
                end

                break
              end
            end

            set i (math $i + 1)
          end
        end
      case '*'
        set -a positionals $arg
    end

    set argi (math $argi + 1)
  end

  # ===========================================================================
  # Commands
  # ===========================================================================

  if test (count $argv) -eq 0
    echo "$func: missing command" >&2
    return 1
  end

  set -l cmd "$argv[1]"
  set -e argv[1]

  switch $cmd
    case 'positional_contains'
      if test (count $argv) -eq 0
        echo "$func: positional_contains: argv[3]: missing number" >&2
        return 1
      end

      set -l positional_num $argv[1]
      set -e argv[1]
      contains -- $positionals[$positional_num] $argv && return 0 || return 1
    case 'has_option'
      for option in $having_options
        contains -- $option $argv && return 0
      end

      return 1
    case 'num_of_positionals'
      if test (count $argv) -eq 0
        count $positionals
      else if test (count $argv) -eq 2
        if contains -- $argv[1] -lt -le -eq -ne -gt -ge;
          test (count $positionals) $argv[1] $argv[2] && return 0 || return 1
        else
          echo "$func: num_of_positionals: $argv[1]: unknown operator" >&2
          return 1
        end
      else if test (count $argv) -eq 1
        echo "$func: num_of_positionals: $argv[1]: missing operand" >&2
        return 1
      end
    case '*'
      echo "$func: argv[2]: invalid command" >&2
      return 1
  end
end

set -l prog "nbfc_service"
set -l helper "_nbfc_service_fish_helper"

# command nbfc_service
set -l options "--help,-h,-r,--read-only,-f,--fork,-d,--debug,-c=,--config-file=,-e=,--embedded-controller="
set -l guard000 "not $helper '$options' has_option --help -h"
set -l guard001 "not $helper '$options' has_option -r --read-only"
set -l guard002 "not $helper '$options' has_option -f --fork"
set -l guard003 "not $helper '$options' has_option -d --debug"
set -l guard004 "not $helper '$options' has_option -c --config-file"
set -l guard005 "not $helper '$options' has_option -e --embedded-controller"
complete -c $prog -n $guard000 -s h -l help -d 'show this help message and exit' -f
complete -c $prog -n $guard001 -s r -l read-only -d 'Start in read-only mode' -f
complete -c $prog -n $guard002 -s f -l fork -d 'Switch process to background after sucessfully started' -f
complete -c $prog -n $guard003 -s d -l debug -d 'Enable tracing of reads and writes of the embedded controller' -f
complete -c $prog -n $guard004 -s c -l config-file -d 'Use alternative config file (default @SYSCONFDIR@/nbfc/nbfc.json)' -r -F
complete -c $prog -n $guard005 -s e -l embedded-controller -d 'Specify embedded controller to use' -x -a 'dummy dev_port ec_sys acpi_ec'

# vim: ft=fish ts=2 sts=2 sw=2 et
